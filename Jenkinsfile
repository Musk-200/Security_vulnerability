pipeline {
    agent any
    
    environment {
        // Jenkins FunctionalID Credentials
        JENKINS_PASS = credentials('jenkins_api_token')
        JENKINS_CREDS = "${JENKINS_PASS_USR}:${JENKINS_PASS_PSW}"
        REMOTE_JENKINS_URL="https://sec-isc-team-infra-test-pipeline-jenkins.swg-devops.com"
        REMOTE_JOB_NAME="icp/cp4s-scans/Container_Scans/Multiscanner/scan-single-image"
        
    }

    stages {
        stage('Trigger another pipeline') {
            steps {
                script {
                    echo "Operator: ${params.Operator_name}"
                    echo "Branch: ${params.Branch}"
                    
                    // Check if the operator is valid
                    def operator = params.Operator_name
                    def isOperatorValid = ["cp4s-foundations", "cp4s-sequences", "cp4s-platform", "cp4s-truststore", "cp4s-helper", "cp4s-middleware", "cp4s-backuprestore"].contains(operator)
                    
                    // Trigger the appropriate downstream pipeline based on the operator validity
                    def triggeredJobName = isOperatorValid ? 'icp/cp4s-operators/build-operator-images/Infra-Operators/build-infra-operator-images_test' : 'icp/Infra-builds/build-all-infra-microservices'
                    def triggeredBuild = build job: triggeredJobName, parameters: [
                        string(name: 'OPERATOR_NAME', value: params.Operator_name), 
                        string(name: 'BRANCH', value: params.Branch), 
                        string(name: 'CHANNEL', value: 'alpha'),
                        string(name: 'IMAGE_TAG', value: 'Dev')
                    ]
                    
                    // Fetch the console output of the triggered pipeline
                    def jobName = 'icp/job/cp4s-operators/job/build-operator-images/job/Infra-Operators/job/build-infra-operator-images_test'
                    def buildNumber = '22' // Replace '123' with the actual build number of the triggered pipeline

                    // Construct the URL to fetch the console output
                    def consoleOutputUrl = "https://sec-isc-infra-jenkins.swg-devops.com/job/${jobName}/${buildNumber}/consoleText"

                    // Fetch the console output using curl command
                    def consoleOutput = sh(script: "curl -u '${JENKINS_CREDS}' '${consoleOutputUrl}'", returnStdout: true).trim()

                    // Print the console output
                    println consoleOutput
                    
                    // Define the keyword you want to search for
                    def keywordPrefix = "Dev_"

                    // Split the console output into lines
                    def lines = consoleOutput.split('\n')
                    
                    // Iterate over each line to find the keyword
                    lines.each { line ->
                        if (line.contains(keywordPrefix)) {
                            // Extract the word that contains the keyword
                            def words = line.tokenize()
                            words.each { word ->
                                if (word.startsWith(keywordPrefix)) {
                                    println "Match found: $word"
                                    // Trigger the last job with the matched word
                                    // Define parameters for the remote job
                                  def parameters = [
                                    IMAGE: word,
                                    REPO: 'quay.io'
                                    // Add more parameters as needed
                    ]

                                 // Construct URL to trigger remote job with parameters
                                 def remoteJobUrl = "${REMOTE_JENKINS_URL}/job/${REMOTE_JOB_NAME}/buildWithParameters"
                    
                                 // Make HTTP POST request to trigger remote job
                                 def response = httpRequest(
                                   url: remoteJobUrl,
                                   httpMode: 'POST',
                                   authentication: 'BASIC',
                                   username: REMOTE_JENKINS_USER,
                                   password: REMOTE_JENKINS_TOKEN,
                                   requestBody: parameters)

                                  // Check response status
                                   if (response.status != 201) {
                                      error "Failed to trigger remote job. Status code: ${response.status}"
                                         }
                                }
                            }
                        }
                    }
                    
                }
            }
        }
    }
    
    post {
        always {
            script {
                // Save console output to a file
                sh '''#!/bin/bash
                current_time=$(date +"%F_%T").txt
                consolelogs=logs_$current_time
                curl -u "${JENKINS_CREDS}" ${BUILD_URL}consoleText >> $consolelogs
                '''
                
                // Archive console output artifacts
                archiveArtifacts artifacts: '*.txt'
            }
        }
    }
    
}
